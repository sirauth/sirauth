// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"sirauth/ent/realmoauthclient"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// RealmOAuthClient is the model entity for the RealmOAuthClient schema.
type RealmOAuthClient struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// RealmID holds the value of the "realm_id" field.
	RealmID int64 `json:"realm_id,omitempty"`
	// ClientSecret holds the value of the "client_secret" field.
	ClientSecret string `json:"client_secret,omitempty"`
	// ClientID holds the value of the "client_id" field.
	ClientID string `json:"client_id,omitempty"`
	// RedirectUrls holds the value of the "redirect_urls" field.
	RedirectUrls []string `json:"redirect_urls,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RealmOAuthClient) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case realmoauthclient.FieldRedirectUrls:
			values[i] = new([]byte)
		case realmoauthclient.FieldID, realmoauthclient.FieldRealmID:
			values[i] = new(sql.NullInt64)
		case realmoauthclient.FieldClientSecret, realmoauthclient.FieldClientID:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type RealmOAuthClient", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RealmOAuthClient fields.
func (roc *RealmOAuthClient) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case realmoauthclient.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			roc.ID = int(value.Int64)
		case realmoauthclient.FieldRealmID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field realm_id", values[i])
			} else if value.Valid {
				roc.RealmID = value.Int64
			}
		case realmoauthclient.FieldClientSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_secret", values[i])
			} else if value.Valid {
				roc.ClientSecret = value.String
			}
		case realmoauthclient.FieldClientID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_id", values[i])
			} else if value.Valid {
				roc.ClientID = value.String
			}
		case realmoauthclient.FieldRedirectUrls:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field redirect_urls", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &roc.RedirectUrls); err != nil {
					return fmt.Errorf("unmarshal field redirect_urls: %w", err)
				}
			}
		}
	}
	return nil
}

// Update returns a builder for updating this RealmOAuthClient.
// Note that you need to call RealmOAuthClient.Unwrap() before calling this method if this RealmOAuthClient
// was returned from a transaction, and the transaction was committed or rolled back.
func (roc *RealmOAuthClient) Update() *RealmOAuthClientUpdateOne {
	return (&RealmOAuthClientClient{config: roc.config}).UpdateOne(roc)
}

// Unwrap unwraps the RealmOAuthClient entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (roc *RealmOAuthClient) Unwrap() *RealmOAuthClient {
	tx, ok := roc.config.driver.(*txDriver)
	if !ok {
		panic("ent: RealmOAuthClient is not a transactional entity")
	}
	roc.config.driver = tx.drv
	return roc
}

// String implements the fmt.Stringer.
func (roc *RealmOAuthClient) String() string {
	var builder strings.Builder
	builder.WriteString("RealmOAuthClient(")
	builder.WriteString(fmt.Sprintf("id=%v", roc.ID))
	builder.WriteString(", realm_id=")
	builder.WriteString(fmt.Sprintf("%v", roc.RealmID))
	builder.WriteString(", client_secret=")
	builder.WriteString(roc.ClientSecret)
	builder.WriteString(", client_id=")
	builder.WriteString(roc.ClientID)
	builder.WriteString(", redirect_urls=")
	builder.WriteString(fmt.Sprintf("%v", roc.RedirectUrls))
	builder.WriteByte(')')
	return builder.String()
}

// RealmOAuthClients is a parsable slice of RealmOAuthClient.
type RealmOAuthClients []*RealmOAuthClient

func (roc RealmOAuthClients) config(cfg config) {
	for _i := range roc {
		roc[_i].config = cfg
	}
}
