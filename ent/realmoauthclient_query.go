// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"
	"sirauth/ent/predicate"
	"sirauth/ent/realmoauthclient"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RealmOAuthClientQuery is the builder for querying RealmOAuthClient entities.
type RealmOAuthClientQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.RealmOAuthClient
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the RealmOAuthClientQuery builder.
func (rocq *RealmOAuthClientQuery) Where(ps ...predicate.RealmOAuthClient) *RealmOAuthClientQuery {
	rocq.predicates = append(rocq.predicates, ps...)
	return rocq
}

// Limit adds a limit step to the query.
func (rocq *RealmOAuthClientQuery) Limit(limit int) *RealmOAuthClientQuery {
	rocq.limit = &limit
	return rocq
}

// Offset adds an offset step to the query.
func (rocq *RealmOAuthClientQuery) Offset(offset int) *RealmOAuthClientQuery {
	rocq.offset = &offset
	return rocq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rocq *RealmOAuthClientQuery) Unique(unique bool) *RealmOAuthClientQuery {
	rocq.unique = &unique
	return rocq
}

// Order adds an order step to the query.
func (rocq *RealmOAuthClientQuery) Order(o ...OrderFunc) *RealmOAuthClientQuery {
	rocq.order = append(rocq.order, o...)
	return rocq
}

// First returns the first RealmOAuthClient entity from the query.
// Returns a *NotFoundError when no RealmOAuthClient was found.
func (rocq *RealmOAuthClientQuery) First(ctx context.Context) (*RealmOAuthClient, error) {
	nodes, err := rocq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{realmoauthclient.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rocq *RealmOAuthClientQuery) FirstX(ctx context.Context) *RealmOAuthClient {
	node, err := rocq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first RealmOAuthClient ID from the query.
// Returns a *NotFoundError when no RealmOAuthClient ID was found.
func (rocq *RealmOAuthClientQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rocq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{realmoauthclient.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rocq *RealmOAuthClientQuery) FirstIDX(ctx context.Context) int {
	id, err := rocq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single RealmOAuthClient entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one RealmOAuthClient entity is found.
// Returns a *NotFoundError when no RealmOAuthClient entities are found.
func (rocq *RealmOAuthClientQuery) Only(ctx context.Context) (*RealmOAuthClient, error) {
	nodes, err := rocq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{realmoauthclient.Label}
	default:
		return nil, &NotSingularError{realmoauthclient.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rocq *RealmOAuthClientQuery) OnlyX(ctx context.Context) *RealmOAuthClient {
	node, err := rocq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only RealmOAuthClient ID in the query.
// Returns a *NotSingularError when more than one RealmOAuthClient ID is found.
// Returns a *NotFoundError when no entities are found.
func (rocq *RealmOAuthClientQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rocq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{realmoauthclient.Label}
	default:
		err = &NotSingularError{realmoauthclient.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rocq *RealmOAuthClientQuery) OnlyIDX(ctx context.Context) int {
	id, err := rocq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of RealmOAuthClients.
func (rocq *RealmOAuthClientQuery) All(ctx context.Context) ([]*RealmOAuthClient, error) {
	if err := rocq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return rocq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (rocq *RealmOAuthClientQuery) AllX(ctx context.Context) []*RealmOAuthClient {
	nodes, err := rocq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of RealmOAuthClient IDs.
func (rocq *RealmOAuthClientQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := rocq.Select(realmoauthclient.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rocq *RealmOAuthClientQuery) IDsX(ctx context.Context) []int {
	ids, err := rocq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rocq *RealmOAuthClientQuery) Count(ctx context.Context) (int, error) {
	if err := rocq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return rocq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (rocq *RealmOAuthClientQuery) CountX(ctx context.Context) int {
	count, err := rocq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rocq *RealmOAuthClientQuery) Exist(ctx context.Context) (bool, error) {
	if err := rocq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return rocq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (rocq *RealmOAuthClientQuery) ExistX(ctx context.Context) bool {
	exist, err := rocq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the RealmOAuthClientQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rocq *RealmOAuthClientQuery) Clone() *RealmOAuthClientQuery {
	if rocq == nil {
		return nil
	}
	return &RealmOAuthClientQuery{
		config:     rocq.config,
		limit:      rocq.limit,
		offset:     rocq.offset,
		order:      append([]OrderFunc{}, rocq.order...),
		predicates: append([]predicate.RealmOAuthClient{}, rocq.predicates...),
		// clone intermediate query.
		sql:    rocq.sql.Clone(),
		path:   rocq.path,
		unique: rocq.unique,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		RealmID int64 `json:"realm_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.RealmOAuthClient.Query().
//		GroupBy(realmoauthclient.FieldRealmID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (rocq *RealmOAuthClientQuery) GroupBy(field string, fields ...string) *RealmOAuthClientGroupBy {
	group := &RealmOAuthClientGroupBy{config: rocq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := rocq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return rocq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		RealmID int64 `json:"realm_id,omitempty"`
//	}
//
//	client.RealmOAuthClient.Query().
//		Select(realmoauthclient.FieldRealmID).
//		Scan(ctx, &v)
//
func (rocq *RealmOAuthClientQuery) Select(fields ...string) *RealmOAuthClientSelect {
	rocq.fields = append(rocq.fields, fields...)
	return &RealmOAuthClientSelect{RealmOAuthClientQuery: rocq}
}

func (rocq *RealmOAuthClientQuery) prepareQuery(ctx context.Context) error {
	for _, f := range rocq.fields {
		if !realmoauthclient.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if rocq.path != nil {
		prev, err := rocq.path(ctx)
		if err != nil {
			return err
		}
		rocq.sql = prev
	}
	return nil
}

func (rocq *RealmOAuthClientQuery) sqlAll(ctx context.Context) ([]*RealmOAuthClient, error) {
	var (
		nodes = []*RealmOAuthClient{}
		_spec = rocq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &RealmOAuthClient{config: rocq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, rocq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (rocq *RealmOAuthClientQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rocq.querySpec()
	_spec.Node.Columns = rocq.fields
	if len(rocq.fields) > 0 {
		_spec.Unique = rocq.unique != nil && *rocq.unique
	}
	return sqlgraph.CountNodes(ctx, rocq.driver, _spec)
}

func (rocq *RealmOAuthClientQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := rocq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (rocq *RealmOAuthClientQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   realmoauthclient.Table,
			Columns: realmoauthclient.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: realmoauthclient.FieldID,
			},
		},
		From:   rocq.sql,
		Unique: true,
	}
	if unique := rocq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := rocq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, realmoauthclient.FieldID)
		for i := range fields {
			if fields[i] != realmoauthclient.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := rocq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rocq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rocq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rocq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rocq *RealmOAuthClientQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rocq.driver.Dialect())
	t1 := builder.Table(realmoauthclient.Table)
	columns := rocq.fields
	if len(columns) == 0 {
		columns = realmoauthclient.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rocq.sql != nil {
		selector = rocq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if rocq.unique != nil && *rocq.unique {
		selector.Distinct()
	}
	for _, p := range rocq.predicates {
		p(selector)
	}
	for _, p := range rocq.order {
		p(selector)
	}
	if offset := rocq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rocq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// RealmOAuthClientGroupBy is the group-by builder for RealmOAuthClient entities.
type RealmOAuthClientGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rocgb *RealmOAuthClientGroupBy) Aggregate(fns ...AggregateFunc) *RealmOAuthClientGroupBy {
	rocgb.fns = append(rocgb.fns, fns...)
	return rocgb
}

// Scan applies the group-by query and scans the result into the given value.
func (rocgb *RealmOAuthClientGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := rocgb.path(ctx)
	if err != nil {
		return err
	}
	rocgb.sql = query
	return rocgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (rocgb *RealmOAuthClientGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := rocgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (rocgb *RealmOAuthClientGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(rocgb.fields) > 1 {
		return nil, errors.New("ent: RealmOAuthClientGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := rocgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (rocgb *RealmOAuthClientGroupBy) StringsX(ctx context.Context) []string {
	v, err := rocgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (rocgb *RealmOAuthClientGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = rocgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{realmoauthclient.Label}
	default:
		err = fmt.Errorf("ent: RealmOAuthClientGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (rocgb *RealmOAuthClientGroupBy) StringX(ctx context.Context) string {
	v, err := rocgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (rocgb *RealmOAuthClientGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(rocgb.fields) > 1 {
		return nil, errors.New("ent: RealmOAuthClientGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := rocgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (rocgb *RealmOAuthClientGroupBy) IntsX(ctx context.Context) []int {
	v, err := rocgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (rocgb *RealmOAuthClientGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = rocgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{realmoauthclient.Label}
	default:
		err = fmt.Errorf("ent: RealmOAuthClientGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (rocgb *RealmOAuthClientGroupBy) IntX(ctx context.Context) int {
	v, err := rocgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (rocgb *RealmOAuthClientGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(rocgb.fields) > 1 {
		return nil, errors.New("ent: RealmOAuthClientGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := rocgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (rocgb *RealmOAuthClientGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := rocgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (rocgb *RealmOAuthClientGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = rocgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{realmoauthclient.Label}
	default:
		err = fmt.Errorf("ent: RealmOAuthClientGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (rocgb *RealmOAuthClientGroupBy) Float64X(ctx context.Context) float64 {
	v, err := rocgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (rocgb *RealmOAuthClientGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(rocgb.fields) > 1 {
		return nil, errors.New("ent: RealmOAuthClientGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := rocgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (rocgb *RealmOAuthClientGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := rocgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (rocgb *RealmOAuthClientGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = rocgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{realmoauthclient.Label}
	default:
		err = fmt.Errorf("ent: RealmOAuthClientGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (rocgb *RealmOAuthClientGroupBy) BoolX(ctx context.Context) bool {
	v, err := rocgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rocgb *RealmOAuthClientGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range rocgb.fields {
		if !realmoauthclient.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := rocgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rocgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (rocgb *RealmOAuthClientGroupBy) sqlQuery() *sql.Selector {
	selector := rocgb.sql.Select()
	aggregation := make([]string, 0, len(rocgb.fns))
	for _, fn := range rocgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(rocgb.fields)+len(rocgb.fns))
		for _, f := range rocgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(rocgb.fields...)...)
}

// RealmOAuthClientSelect is the builder for selecting fields of RealmOAuthClient entities.
type RealmOAuthClientSelect struct {
	*RealmOAuthClientQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (rocs *RealmOAuthClientSelect) Scan(ctx context.Context, v interface{}) error {
	if err := rocs.prepareQuery(ctx); err != nil {
		return err
	}
	rocs.sql = rocs.RealmOAuthClientQuery.sqlQuery(ctx)
	return rocs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (rocs *RealmOAuthClientSelect) ScanX(ctx context.Context, v interface{}) {
	if err := rocs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (rocs *RealmOAuthClientSelect) Strings(ctx context.Context) ([]string, error) {
	if len(rocs.fields) > 1 {
		return nil, errors.New("ent: RealmOAuthClientSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := rocs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (rocs *RealmOAuthClientSelect) StringsX(ctx context.Context) []string {
	v, err := rocs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (rocs *RealmOAuthClientSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = rocs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{realmoauthclient.Label}
	default:
		err = fmt.Errorf("ent: RealmOAuthClientSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (rocs *RealmOAuthClientSelect) StringX(ctx context.Context) string {
	v, err := rocs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (rocs *RealmOAuthClientSelect) Ints(ctx context.Context) ([]int, error) {
	if len(rocs.fields) > 1 {
		return nil, errors.New("ent: RealmOAuthClientSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := rocs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (rocs *RealmOAuthClientSelect) IntsX(ctx context.Context) []int {
	v, err := rocs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (rocs *RealmOAuthClientSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = rocs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{realmoauthclient.Label}
	default:
		err = fmt.Errorf("ent: RealmOAuthClientSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (rocs *RealmOAuthClientSelect) IntX(ctx context.Context) int {
	v, err := rocs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (rocs *RealmOAuthClientSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(rocs.fields) > 1 {
		return nil, errors.New("ent: RealmOAuthClientSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := rocs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (rocs *RealmOAuthClientSelect) Float64sX(ctx context.Context) []float64 {
	v, err := rocs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (rocs *RealmOAuthClientSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = rocs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{realmoauthclient.Label}
	default:
		err = fmt.Errorf("ent: RealmOAuthClientSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (rocs *RealmOAuthClientSelect) Float64X(ctx context.Context) float64 {
	v, err := rocs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (rocs *RealmOAuthClientSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(rocs.fields) > 1 {
		return nil, errors.New("ent: RealmOAuthClientSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := rocs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (rocs *RealmOAuthClientSelect) BoolsX(ctx context.Context) []bool {
	v, err := rocs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (rocs *RealmOAuthClientSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = rocs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{realmoauthclient.Label}
	default:
		err = fmt.Errorf("ent: RealmOAuthClientSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (rocs *RealmOAuthClientSelect) BoolX(ctx context.Context) bool {
	v, err := rocs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rocs *RealmOAuthClientSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := rocs.sql.Query()
	if err := rocs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
